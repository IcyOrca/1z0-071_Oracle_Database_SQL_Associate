Controlling transactions in Oracle SQL involves using transaction control statements to manage the beginning, committing, and rolling back of transactions. 
Here are the key transaction control statements:

1. BEGIN TRANSACTION (Implicit Commit):
By default, each SQL statement in Oracle SQL is treated as a separate transaction, and an implicit commit is performed after each statement.
To begin an explicit transaction, you can use the BEGIN TRANSACTION statement. 
However, it's important to note that this is not standard SQL and may not be supported in all database systems.
    BEGIN TRANSACTION;
    -- Your SQL statements here
    COMMIT;

2. COMMIT:
The COMMIT statement is used to permanently save changes made during the current transaction. 
It makes the changes visible to other users.
    COMMIT;

3. ROLLBACK:
The ROLLBACK statement is used to undo changes made during the current transaction. 
It is typically used in error-handling scenarios or to undo changes in case of issues.
    ROLLBACK;

4. SAVEPOINT:
The SAVEPOINT statement sets a savepoint within a transaction, allowing you to later roll back to that savepoint.
    SAVEPOINT savepoint_name;
    -- Your SQL statements here
    ROLLBACK TO savepoint_name;

Example: Controlling Transactions
    BEGIN
       -- Start a transaction explicitly
       SAVEPOINT start_transaction;

       -- Perform DML operations
       UPDATE employees SET salary = salary * 1.1 WHERE department_id = 10;

       -- Check for errors and commit or rollback accordingly
       IF (no_errors) THEN
          COMMIT; -- Commit changes
       ELSE
          ROLLBACK TO start_transaction; -- Rollback to the savepoint
       END IF;
    END;

In this example:
    A savepoint named start_transaction is set at the beginning of the transaction.
    DML operations are performed within the transaction.
    Based on whether there are errors (no_errors), the transaction is either committed or rolled back to the savepoint.

Always consider the scope and impact of your transactions. 
Explicitly starting a transaction with BEGIN TRANSACTION is not always necessary
, as Oracle SQL performs implicit commits after each SQL statement by default. 

Explicit transactions are more common in procedural languages like PL/SQL. 
Use transactions judiciously to ensure data consistency and integrity.