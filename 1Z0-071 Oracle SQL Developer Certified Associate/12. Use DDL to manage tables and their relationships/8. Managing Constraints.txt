In a relational database, constraints are rules that define the relationships between tables and the data stored in them. 
Constraints help ensure the accuracy and integrity of the data. Here are some common types of constraints and how to manage them:

1. Primary Key Constraint:
A primary key uniquely identifies each record in a table. To create a primary key constraint:
    CREATE TABLE employees (
        employee_id INT PRIMARY KEY,
        first_name VARCHAR(50),
        last_name VARCHAR(50));

To add a primary key to an existing table:
    ALTER TABLE employees ADD PRIMARY KEY (employee_id);

2. Foreign Key Constraint:
A foreign key establishes a link between two tables by referencing a unique key in another table. To create a foreign key:
    CREATE TABLE orders (
        order_id INT PRIMARY KEY,
        customer_id INT,
        order_date DATE,
        FOREIGN KEY (customer_id) REFERENCES customers(customer_id));

3. Unique Constraint:
A unique constraint ensures that all values in a column are distinct. To create a unique constraint:
    CREATE TABLE departments (
        department_id INT PRIMARY KEY,
        department_name VARCHAR(50) UNIQUE);

4. Check Constraint:
A check constraint enforces a condition on the values in a column. For example:
    CREATE TABLE students (
        student_id INT PRIMARY KEY,
        age INT CHECK (age >= 18),
        grade CHAR(1) CHECK (grade IN ('A', 'B', 'C', 'D', 'F')));

5. Not Null Constraint:
A not null constraint ensures that a column cannot have a null value:
    CREATE TABLE customers (
        customer_id INT PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL);

6. Dropping Constraints:
To drop a constraint, you can use the ALTER TABLE statement. For example, to drop a primary key constraint:
    ALTER TABLE employees DROP PRIMARY KEY;

7. Disabling and Enabling Constraints:
Some databases allow you to disable and enable constraints. 
This can be useful when you need to perform operations that temporarily violate a constraint. For example:
    ALTER TABLE employees DISABLE CONSTRAINT emp_salary_check;
    ALTER TABLE employees ENABLE CONSTRAINT emp_salary_check;

Always be cautious when modifying constraints, as they play a crucial role in maintaining data integrity. 
Ensure that your changes align with the database design and business rules.